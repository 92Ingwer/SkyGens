plugins {
    id 'java'
}

group = 'org.kim'
version = '1.0'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }
    maven {
        url = "https://maven.enginehub.org/repo/"
    }
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    //   maven { url = "https://repo.onarandombox.com/content/groups/public/" }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'
    // compileOnly 'com.onarandombox.multiversecore:Multiverse-Core:4.3.1'
    // The Spigot API with no shadowing. Requires the OSS repo.
    compileOnly 'org.spigotmc:spigot:1.20.4-R0.1-SNAPSHOT'
    // The full Spigot server with no shadowing. Requires mavenLocal.
    implementation 'org.json:json:20231013'
    implementation "org.hibernate.orm:hibernate-core:6.6.2.Final"
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.3.8' // Ersetze die Version durch die neueste

    compileOnly('net.citizensnpcs:citizens-main:2.0.35-SNAPSHOT') {
        exclude group: '*', module: '*'
    }
    // https://mvnrepository.com/artifact/com.sk89q.worldedit/worldedit-bukkit

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
